{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"blackscholes Documentation structure: 1. Quickstart 2. Price calculation 3. The Greeks (Black-Scholes) 4. The Greeks (Black-76) 5. In-the-money proxies 6. Option Structures 7. Source Code References 8. Disclaimer Contribution guide Black Scholes calculator for Python including all Greeks. Supports the Black-Scholes-Merton model, Black-76 model and option structures. Currently only supports European options . Installation pip install blackscholes Examples Input variables S = 55.0 # Asset price of 55 K = 50.0 # Strike price of 50 T = 1.0 # 1 Year to maturity r = 0.0025 # 0.25% Risk-free rate sigma = 0.15 # 15% Volatiltiy q = 0. # 0% Annual Dividend Yield Call from blackscholes import BlackScholesCall call = BlackScholesCall ( S = S , K = K , T = T , r = r , sigma = sigma , q = q ) call . price () ## 6.339408 call . delta () ## 0.766407 call . spot_delta () ## 0.7683 call . charm () ## 0.083267 Put from blackscholes import BlackScholesPut put = BlackScholesPut ( S = S , K = K , T = T , r = r , sigma = sigma , q = q ) put . price () ## 1.214564 put . delta () ## -0.23359 put . spot_delta () ## -0.23417 put . charm () ## 0.083267 Black76 The Black-76 model is often specifically used for options and futures and bonds. blackscholes also supports this model. To see all available greeks check out section 4. The Greeks (Black-76) . Call from blackscholes import Black76Call call = Black76Call ( F = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) call . price () ## 6.2345 call . delta () ## 0.7594 call . vomma () ## 45.1347 Put from blackscholes import Black76Put put = Black76Put ( F = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) put . price () ## 1.2470 put . delta () ## -0.2381 put . vomma () ## 45.1347 Structures Structures are combination of call and put options. Every option structure has a Long and Short version. To learn more check out section 6. Option Structures . Long Straddle from blackscholes import BlackScholesStraddleLong straddle = BlackScholesStraddleLong ( S = 55 , K = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) straddle . price () ## 7.5539 straddle . delta () ## 0.5328 Long Strangle from blackscholes import BlackScholesStrangleLong strangle = BlackScholesStrangleLong ( S = 55 , K1 = 40 , K2 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) strangle . price () ## 6.3800 strangle . delta () ## 0.7530 Long (Call) Butterfly from blackscholes import BlackScholesButterflyLong butterfly = BlackScholesButterflyLong ( S = 55 , K1 = 40 , K2 = 50 , K3 = 60 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) butterfly . price () ## 3.9993 butterfly . delta () ## -0.2336 Long Iron Condor from blackscholes import BlackScholesIronCondorLong iron_condor = BlackScholesIronCondorLong ( S = 55 , K1 = 20 , K2 = 25 , K3 = 45 , K4 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) iron_condor . price () ## 4.0742 iron_condor . delta () ## 0.1572 Bull Spread from blackscholes import BlackScholesBullSpread bull_spread = BlackScholesBullSpread ( S = 55 , K1 = 40 , K2 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) bull_spread . price () ## 8.8011 bull_spread . delta () ## 0.2202 Bear Spread from blackscholes import BlackScholesBearSpread bear_spread = BlackScholesBearSpread ( S = 55 , K1 = 50 , K2 = 40 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) bear_spread . price () ## 1.1740 bear_spread . delta () ## -0.2202 Long Iron Butterfly from blackscholes import BlackScholesIronButterflyLong iron_butterfly = BlackScholesIronButterflyLong ( S = 55 , K1 = 95 , K2 = 100 , K3 = 105 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) iron_butterfly . price () ## 4.9873 iron_butterfly . delta () ## -0.0001 Short Iron Butterfly from blackscholes import BlackScholesIronButterflyShort iron_butterfly = BlackScholesIronButterflyShort ( S = 55 , K1 = 95 , K2 = 100 , K3 = 105 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) iron_butterfly . price () ## -4.9873 iron_butterfly . delta () ## 0.0001","title":"blackscholes"},{"location":"#blackscholes","text":"","title":"blackscholes"},{"location":"#documentation-structure","text":"1. Quickstart 2. Price calculation 3. The Greeks (Black-Scholes) 4. The Greeks (Black-76) 5. In-the-money proxies 6. Option Structures 7. Source Code References 8. Disclaimer Contribution guide Black Scholes calculator for Python including all Greeks. Supports the Black-Scholes-Merton model, Black-76 model and option structures. Currently only supports European options .","title":"Documentation structure:"},{"location":"#installation","text":"pip install blackscholes","title":"Installation"},{"location":"#examples","text":"","title":"Examples"},{"location":"#input-variables","text":"S = 55.0 # Asset price of 55 K = 50.0 # Strike price of 50 T = 1.0 # 1 Year to maturity r = 0.0025 # 0.25% Risk-free rate sigma = 0.15 # 15% Volatiltiy q = 0. # 0% Annual Dividend Yield","title":"Input variables"},{"location":"#call","text":"from blackscholes import BlackScholesCall call = BlackScholesCall ( S = S , K = K , T = T , r = r , sigma = sigma , q = q ) call . price () ## 6.339408 call . delta () ## 0.766407 call . spot_delta () ## 0.7683 call . charm () ## 0.083267","title":"Call"},{"location":"#put","text":"from blackscholes import BlackScholesPut put = BlackScholesPut ( S = S , K = K , T = T , r = r , sigma = sigma , q = q ) put . price () ## 1.214564 put . delta () ## -0.23359 put . spot_delta () ## -0.23417 put . charm () ## 0.083267","title":"Put"},{"location":"#black76","text":"The Black-76 model is often specifically used for options and futures and bonds. blackscholes also supports this model. To see all available greeks check out section 4. The Greeks (Black-76) . Call from blackscholes import Black76Call call = Black76Call ( F = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) call . price () ## 6.2345 call . delta () ## 0.7594 call . vomma () ## 45.1347 Put from blackscholes import Black76Put put = Black76Put ( F = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) put . price () ## 1.2470 put . delta () ## -0.2381 put . vomma () ## 45.1347","title":"Black76"},{"location":"#structures","text":"Structures are combination of call and put options. Every option structure has a Long and Short version. To learn more check out section 6. Option Structures . Long Straddle from blackscholes import BlackScholesStraddleLong straddle = BlackScholesStraddleLong ( S = 55 , K = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) straddle . price () ## 7.5539 straddle . delta () ## 0.5328 Long Strangle from blackscholes import BlackScholesStrangleLong strangle = BlackScholesStrangleLong ( S = 55 , K1 = 40 , K2 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) strangle . price () ## 6.3800 strangle . delta () ## 0.7530 Long (Call) Butterfly from blackscholes import BlackScholesButterflyLong butterfly = BlackScholesButterflyLong ( S = 55 , K1 = 40 , K2 = 50 , K3 = 60 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) butterfly . price () ## 3.9993 butterfly . delta () ## -0.2336 Long Iron Condor from blackscholes import BlackScholesIronCondorLong iron_condor = BlackScholesIronCondorLong ( S = 55 , K1 = 20 , K2 = 25 , K3 = 45 , K4 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) iron_condor . price () ## 4.0742 iron_condor . delta () ## 0.1572 Bull Spread from blackscholes import BlackScholesBullSpread bull_spread = BlackScholesBullSpread ( S = 55 , K1 = 40 , K2 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) bull_spread . price () ## 8.8011 bull_spread . delta () ## 0.2202 Bear Spread from blackscholes import BlackScholesBearSpread bear_spread = BlackScholesBearSpread ( S = 55 , K1 = 50 , K2 = 40 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) bear_spread . price () ## 1.1740 bear_spread . delta () ## -0.2202 Long Iron Butterfly from blackscholes import BlackScholesIronButterflyLong iron_butterfly = BlackScholesIronButterflyLong ( S = 55 , K1 = 95 , K2 = 100 , K3 = 105 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) iron_butterfly . price () ## 4.9873 iron_butterfly . delta () ## -0.0001 Short Iron Butterfly from blackscholes import BlackScholesIronButterflyShort iron_butterfly = BlackScholesIronButterflyShort ( S = 55 , K1 = 95 , K2 = 100 , K3 = 105 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) iron_butterfly . price () ## -4.9873 iron_butterfly . delta () ## 0.0001","title":"Structures"},{"location":"1.quickstart/","text":"1. Quickstart Ok, let's skip the fluff and explain how you can quickly get started. 0. Install the library The library is tested for Python version 3.8 up to 3.10. pip install blackscholes 1. Define 5 inputs for computing Black Scholes: S = 55.0 # Asset price K = 50.0 # Strike price T = 1.0 # 1 Year to maturity r = 0.0025 # 0.25% Risk-free rate sigma = 0.15 # 15% Volatility q = 0.0 # 0% Annual Dividend Yield 2. Initialize class for call and/or puts # 2. Initialize class for call and/or puts from blackscholes import BlackScholesCall , BlackScholesPut call = BlackScholesCall ( S , K , T , r , sigma , q ) put = BlackScholesPut ( S , K , T , r , sigma , q ) 3. Get the attributes you want # Fair str_method estimate call . price () ## 6.339408 call . get_core_greeks () # Dictionary with 5 most important Greeks ## {\"delta\": 0.766407808509462, ## \"gamma\": 0.03712496688031454, ## \"vega\": 16.84545372194272, ## \"theta\": -1.3529415670754943, ## \"rho\": 35.813015171916085, ## } call . get_all_greeks () ## {\"delta\": 0.766407808509462, ## \"spot_delta\": 0.7683262250522389, ## \"gamma\": 0.03712496688031454, ## \"vega\": 16.84545372194272, ## \"theta\": -1.3529415670754943, ## \"epsilon\": -42.15242946802041, ## \"rho\": 35.813015171916085, ## \"lambda\": 6.6492624553539255, ## \"vanna\": -1.178299396409533, ## \"charm\": 0.0832677717846717, ## \"vomma\": 47.11869947977544, ## \"veta\": 11.752499520643353, ## \"phi\": 0.04492120992518061, ## \"speed\": -0.003946801873134375, ## \"zomma\": -0.14365691533482322, ## \"color\": -0.011224141490466934, ## \"ultima\": -827.4229433648609, ## \"dual_delta\": 0.7162603034383217, ## \"dual_gamma\": 0.0449212099251806, ## } call . get_itm_proxies () # Dictionary with in-the-money proxies ## {\"naive_itm\": 0.7180531943767934, \"dual_delta\": 0.7162603034383217} call . delta () # Get Delta Greek ## 0.766407808509462 4. (optional) Check \"The Greeks (Black-Scholes)\" section in docs to dive deeper","title":"1. Quickstart"},{"location":"1.quickstart/#1-quickstart","text":"Ok, let's skip the fluff and explain how you can quickly get started.","title":"1. Quickstart"},{"location":"1.quickstart/#0-install-the-library","text":"The library is tested for Python version 3.8 up to 3.10. pip install blackscholes","title":"0. Install the library"},{"location":"1.quickstart/#1-define-5-inputs-for-computing-black-scholes","text":"S = 55.0 # Asset price K = 50.0 # Strike price T = 1.0 # 1 Year to maturity r = 0.0025 # 0.25% Risk-free rate sigma = 0.15 # 15% Volatility q = 0.0 # 0% Annual Dividend Yield","title":"1. Define 5 inputs for computing Black Scholes:"},{"location":"1.quickstart/#2-initialize-class-for-call-andor-puts","text":"# 2. Initialize class for call and/or puts from blackscholes import BlackScholesCall , BlackScholesPut call = BlackScholesCall ( S , K , T , r , sigma , q ) put = BlackScholesPut ( S , K , T , r , sigma , q )","title":"2. Initialize class for call and/or puts"},{"location":"1.quickstart/#3-get-the-attributes-you-want","text":"# Fair str_method estimate call . price () ## 6.339408 call . get_core_greeks () # Dictionary with 5 most important Greeks ## {\"delta\": 0.766407808509462, ## \"gamma\": 0.03712496688031454, ## \"vega\": 16.84545372194272, ## \"theta\": -1.3529415670754943, ## \"rho\": 35.813015171916085, ## } call . get_all_greeks () ## {\"delta\": 0.766407808509462, ## \"spot_delta\": 0.7683262250522389, ## \"gamma\": 0.03712496688031454, ## \"vega\": 16.84545372194272, ## \"theta\": -1.3529415670754943, ## \"epsilon\": -42.15242946802041, ## \"rho\": 35.813015171916085, ## \"lambda\": 6.6492624553539255, ## \"vanna\": -1.178299396409533, ## \"charm\": 0.0832677717846717, ## \"vomma\": 47.11869947977544, ## \"veta\": 11.752499520643353, ## \"phi\": 0.04492120992518061, ## \"speed\": -0.003946801873134375, ## \"zomma\": -0.14365691533482322, ## \"color\": -0.011224141490466934, ## \"ultima\": -827.4229433648609, ## \"dual_delta\": 0.7162603034383217, ## \"dual_gamma\": 0.0449212099251806, ## } call . get_itm_proxies () # Dictionary with in-the-money proxies ## {\"naive_itm\": 0.7180531943767934, \"dual_delta\": 0.7162603034383217} call . delta () # Get Delta Greek ## 0.766407808509462","title":"3. Get the attributes you want"},{"location":"1.quickstart/#4-optional-check-the-greeks-black-scholes-section-in-docs-to-dive-deeper","text":"","title":"4. (optional) Check \"The Greeks (Black-Scholes)\" section in docs to dive deeper"},{"location":"2.price/","text":"2. Price calculation With blackscholes you are able to get a fair value estimate of a call or put option according to the Black-Scholes-Merton model and Black-76 model . Parameters Reference of symbols that are used in the formulas: $S$ = Asset price $F$ = Futures price $K$ = Strike price $T$ = Time to maturity (in years) $r$ = Risk-free rate $\\sigma$ = Volatility $q$ = Annual dividend yield $\\Phi(.)$ = Cumulative Density Function (CDF) of $\\mathcal{N}(0, 1)$ Black-Scholes $d_1 = \\frac{ln(\\frac{S}{K}) + (r - q +\\frac{1}{2}\\sigma^2)T}{\\sigma\\sqrt{T}}$ $d_2 = d_1 - \\sigma\\sqrt{T}$ Call $$ S e^{-qT} \\Phi(d_1) - e^{-rT}K\\Phi(d_2)$$ from blackscholes import BlackScholesCall call = BlackScholesCall ( S = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) call . price () ## 6.339408 ::: blackscholes.call.BlackScholesCall.price Put $$e^{-rT}K\\Phi(-d_2) - S e^{-qT} \\Phi(-d_1)$$ from blackscholes import BlackScholesPut put = BlackScholesPut ( S = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) put . price () ## 1.214564 ::: blackscholes.put.BlackScholesPut.price Black-76 $d_1 = \\frac{ln(\\frac{F}{K}) + \\frac{1}{2}\\sigma^2T}{\\sigma\\sqrt{T}}$ $d_2 = d_1 - \\sigma\\sqrt{T}$ Call $$e^{-rT} \\bigg[F \\Phi(d_1) - K\\Phi(d_2) \\bigg]$$ from blackscholes import Black76Call call = Black76Call ( F = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) call . price () ## 6.2345 ::: blackscholes.call.Black76Call.price Put $$e^{-rT} \\bigg[K \\Phi(-d_2) - F\\Phi(-d_1) \\bigg]$$ from blackscholes import Black76Put F = 55. # Discounted futures price put = Black76Put ( F = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) put . price () ## 1.2470 ::: blackscholes.put.Black76Put.price","title":"2. Price calculation"},{"location":"2.price/#2-price-calculation","text":"With blackscholes you are able to get a fair value estimate of a call or put option according to the Black-Scholes-Merton model and Black-76 model .","title":"2. Price calculation"},{"location":"2.price/#parameters","text":"Reference of symbols that are used in the formulas: $S$ = Asset price $F$ = Futures price $K$ = Strike price $T$ = Time to maturity (in years) $r$ = Risk-free rate $\\sigma$ = Volatility $q$ = Annual dividend yield $\\Phi(.)$ = Cumulative Density Function (CDF) of $\\mathcal{N}(0, 1)$","title":"Parameters"},{"location":"2.price/#black-scholes","text":"$d_1 = \\frac{ln(\\frac{S}{K}) + (r - q +\\frac{1}{2}\\sigma^2)T}{\\sigma\\sqrt{T}}$ $d_2 = d_1 - \\sigma\\sqrt{T}$","title":"Black-Scholes "},{"location":"2.price/#call","text":"$$ S e^{-qT} \\Phi(d_1) - e^{-rT}K\\Phi(d_2)$$ from blackscholes import BlackScholesCall call = BlackScholesCall ( S = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) call . price () ## 6.339408 ::: blackscholes.call.BlackScholesCall.price","title":"Call"},{"location":"2.price/#put","text":"$$e^{-rT}K\\Phi(-d_2) - S e^{-qT} \\Phi(-d_1)$$ from blackscholes import BlackScholesPut put = BlackScholesPut ( S = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) put . price () ## 1.214564 ::: blackscholes.put.BlackScholesPut.price","title":"Put"},{"location":"2.price/#black-76","text":"$d_1 = \\frac{ln(\\frac{F}{K}) + \\frac{1}{2}\\sigma^2T}{\\sigma\\sqrt{T}}$ $d_2 = d_1 - \\sigma\\sqrt{T}$","title":"Black-76 "},{"location":"2.price/#call_1","text":"$$e^{-rT} \\bigg[F \\Phi(d_1) - K\\Phi(d_2) \\bigg]$$ from blackscholes import Black76Call call = Black76Call ( F = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) call . price () ## 6.2345 ::: blackscholes.call.Black76Call.price","title":"Call"},{"location":"2.price/#put_1","text":"$$e^{-rT} \\bigg[K \\Phi(-d_2) - F\\Phi(-d_1) \\bigg]$$ from blackscholes import Black76Put F = 55. # Discounted futures price put = Black76Put ( F = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) put . price () ## 1.2470 ::: blackscholes.put.Black76Put.price","title":"Put"},{"location":"3.the_greeks_blackscholes/","text":"3. The Greeks (Black-Scholes) Below you will find all Greeks for the Black-Scholes-Merton model as formulas, code and descriptions. Parameters Reference of all symbols that are used in the formulas: $S$ = Asset price $K$ = Strike price $T$ = Time to maturity (in years) $r$ = Risk-free rate $\\sigma$ = Volatility $q$ = Annual dividend yield $\\phi(.)$ = Probability Density Function (PDF) of $\\mathcal{N}(0, 1)$ $\\Phi(.)$ = Cumulative Density Function (CDF) of $\\mathcal{N}(0, 1)$ $d_1 = \\frac{ln(\\frac{S}{K}) + (r - q + \\frac{1}{2}\\sigma^2)T}{\\sigma\\sqrt{T}}$ $d_2 = d_1 - \\sigma\\sqrt{T}$ Delta Call Symbol for Delta is $\\Delta$ . $$e^{-qT}\\Phi(d_1)$$ ::: blackscholes.call.BlackScholesCall.delta Put $$e^{-qT}(\\Phi(d_1) - 1)$$ ::: blackscholes.put.BlackScholesPut.delta Spot Delta Call $$e^{(r - q)T}\\Phi(d_1)$$ ::: blackscholes.call.BlackScholesCall.spot_delta Put $$e^{(r - q)T}(\\Phi(d_1) - 1)$$ ::: blackscholes.put.BlackScholesPut.spot_delta Gamma Symbol for Gamma is $\\Gamma$ . $$e^{-qT}\\frac{\\phi(d_1)}{S\\sigma\\sqrt{T}}$$ ::: blackscholes.base.BlackScholesBase.gamma Vega Symbol for Vega is $\\mathcal{V}$ . $$S\\phi(d_1)\\sqrt(T)$$ ::: blackscholes.base.BlackScholesBase.vega Theta Call $$-e^{-qT}\\frac{S\\phi(d_1)\\sigma}{2\\sqrt{T}} - rKe^{-rT}\\Phi(d_2) + qSe^{-qT}\\Phi(d_1)$$ ::: blackscholes.call.BlackScholesCall.theta Put $$-e^{-qT}\\frac{S\\phi(d_1)\\sigma}{2\\sqrt{T}} + rKe^{-rT}\\Phi(-d_2) - qSe^{-qT}\\Phi(-d_1)$$ ::: blackscholes.put.BlackScholesPut.theta Epsilon (psi) Call $$-STe^{-qT}\\Phi(d_1)$$ ::: blackscholes.call.BlackScholesCall.epsilon Put $$STe^{-qT}\\Phi(-d_1)$$ ::: blackscholes.put.BlackScholesPut.epsilon Rho Call $$KTe^{-rT}\\Phi(d_2)$$ ::: blackscholes.call.BlackScholesCall.rho Put $$-KTe^{-rT}\\Phi(-d_2)$$ ::: blackscholes.put.BlackScholesPut.rho Lambda $$\\Delta \\frac{S}{V}$$ where $\\Delta$ indicates the Delta Greek . ::: blackscholes.base.BlackScholesBase.lambda_greek Vanna $$\\frac{\\mathcal{V}}{S}\\bigg[ 1-\\frac{d_1}{\\sigma\\sqrt{T}} \\bigg]$$ where $\\mathcal{V}$ indicates the Vega Greek . ::: blackscholes.base.BlackScholesBase.vanna Charm Call $$qe^{-qT}\\Phi(d_1) - e^{-qT}\\phi(d_1) \\frac{2(r-q)T - d_2\\sigma\\sqrt{T}}{2T\\sigma\\sqrt{T}}$$ ::: blackscholes.call.BlackScholesCall.charm Put $$-qe^{-qT}\\Phi(-d_1) - e^{-qT}\\phi(d_1) \\frac{2(r-q)T - d_2\\sigma\\sqrt{T}}{2T\\sigma\\sqrt{T}}$$ ::: blackscholes.put.BlackScholesPut.charm Vomma $$\\mathcal{V}\\frac{d_1 d_2}{\\sigma}$$ where $\\mathcal{V}$ indicates the Vega Greek . ::: blackscholes.base.BlackScholesBase.vomma Veta $$-Se^{-qT}\\phi(d_1)\\sqrt{T} \\bigg[ q+\\frac{(r-q)d_1}{\\sigma\\sqrt{T}} - \\frac{1+d_1d_2}{2T} \\bigg]$$ ::: blackscholes.base.BlackScholesBase.veta Phi $$e^{-rT} \\frac{1}{K} \\frac{1}{\\sqrt{2\\pi\\sigma^2T}} e^{-\\frac{1}{2\\sigma^2 r} \\bigg[ ln(\\frac{K}{S}) - ((r - q) - \\frac{1}{2}\\sigma^2)T \\bigg]^2}$$ ::: blackscholes.base.BlackScholesBase.phi Speed $$-\\frac{\\Gamma}{S} \\bigg( \\frac{d_1}{\\sigma\\sqrt{T}} + 1 \\bigg)$$ where $\\Gamma$ is the Gamma Greek . ::: blackscholes.base.BlackScholesBase.speed Zomma $$\\Gamma \\frac{d_1 d_2 - 1}{\\sigma}$$ where $\\Gamma$ is the Gamma Greek . ::: blackscholes.base.BlackScholesBase.zomma Color $$- e^{-qT}\\frac{\\phi(d_1)}{2ST\\sigma\\sqrt{T}} \\bigg[2qr + 1 + \\frac{2(r-q)T - d_2\\sigma\\sqrt{T}}{\\sigma\\sqrt{T}}d_1 \\bigg]$$ ::: blackscholes.base.BlackScholesBase.color Ultima $$\\frac{-\\mathcal{V}}{\\sigma^2} \\big[ d_1 d_2 (1 - d_1 d_2) + d_1^2 + d_2^2 \\big]$$ where $\\mathcal{V}$ indicates the Vega Greek . ::: blackscholes.base.BlackScholesBase.ultima Dual Delta Call $$-e^{-rT}\\Phi(d_2)$$ ::: blackscholes.call.BlackScholesCall.dual_delta Put $$e^{-rT}\\Phi(-d_2)$$ ::: blackscholes.put.BlackScholesPut.dual_delta Dual Gamma $$e^{-rT} \\frac{\\phi(d_2)}{K\\sigma\\sqrt{T}}$$ ::: blackscholes.base.BlackScholesBase.dual_gamma Alpha ::: blackscholes.base.BlackScholesBase.alpha","title":"3. The Greeks (Black-Scholes)"},{"location":"3.the_greeks_blackscholes/#3-the-greeks-black-scholes","text":"Below you will find all Greeks for the Black-Scholes-Merton model as formulas, code and descriptions.","title":"3. The Greeks (Black-Scholes)"},{"location":"3.the_greeks_blackscholes/#parameters","text":"Reference of all symbols that are used in the formulas: $S$ = Asset price $K$ = Strike price $T$ = Time to maturity (in years) $r$ = Risk-free rate $\\sigma$ = Volatility $q$ = Annual dividend yield $\\phi(.)$ = Probability Density Function (PDF) of $\\mathcal{N}(0, 1)$ $\\Phi(.)$ = Cumulative Density Function (CDF) of $\\mathcal{N}(0, 1)$ $d_1 = \\frac{ln(\\frac{S}{K}) + (r - q + \\frac{1}{2}\\sigma^2)T}{\\sigma\\sqrt{T}}$ $d_2 = d_1 - \\sigma\\sqrt{T}$","title":"Parameters"},{"location":"3.the_greeks_blackscholes/#delta","text":"","title":"Delta "},{"location":"3.the_greeks_blackscholes/#call","text":"Symbol for Delta is $\\Delta$ . $$e^{-qT}\\Phi(d_1)$$ ::: blackscholes.call.BlackScholesCall.delta","title":"Call"},{"location":"3.the_greeks_blackscholes/#put","text":"$$e^{-qT}(\\Phi(d_1) - 1)$$ ::: blackscholes.put.BlackScholesPut.delta","title":"Put"},{"location":"3.the_greeks_blackscholes/#spot-delta","text":"","title":"Spot Delta"},{"location":"3.the_greeks_blackscholes/#call_1","text":"$$e^{(r - q)T}\\Phi(d_1)$$ ::: blackscholes.call.BlackScholesCall.spot_delta","title":"Call"},{"location":"3.the_greeks_blackscholes/#put_1","text":"$$e^{(r - q)T}(\\Phi(d_1) - 1)$$ ::: blackscholes.put.BlackScholesPut.spot_delta","title":"Put"},{"location":"3.the_greeks_blackscholes/#gamma","text":"Symbol for Gamma is $\\Gamma$ . $$e^{-qT}\\frac{\\phi(d_1)}{S\\sigma\\sqrt{T}}$$ ::: blackscholes.base.BlackScholesBase.gamma","title":"Gamma "},{"location":"3.the_greeks_blackscholes/#vega","text":"Symbol for Vega is $\\mathcal{V}$ . $$S\\phi(d_1)\\sqrt(T)$$ ::: blackscholes.base.BlackScholesBase.vega","title":"Vega "},{"location":"3.the_greeks_blackscholes/#theta","text":"","title":"Theta"},{"location":"3.the_greeks_blackscholes/#call_2","text":"$$-e^{-qT}\\frac{S\\phi(d_1)\\sigma}{2\\sqrt{T}} - rKe^{-rT}\\Phi(d_2) + qSe^{-qT}\\Phi(d_1)$$ ::: blackscholes.call.BlackScholesCall.theta","title":"Call"},{"location":"3.the_greeks_blackscholes/#put_2","text":"$$-e^{-qT}\\frac{S\\phi(d_1)\\sigma}{2\\sqrt{T}} + rKe^{-rT}\\Phi(-d_2) - qSe^{-qT}\\Phi(-d_1)$$ ::: blackscholes.put.BlackScholesPut.theta","title":"Put"},{"location":"3.the_greeks_blackscholes/#epsilon-psi","text":"","title":"Epsilon (psi)"},{"location":"3.the_greeks_blackscholes/#call_3","text":"$$-STe^{-qT}\\Phi(d_1)$$ ::: blackscholes.call.BlackScholesCall.epsilon","title":"Call"},{"location":"3.the_greeks_blackscholes/#put_3","text":"$$STe^{-qT}\\Phi(-d_1)$$ ::: blackscholes.put.BlackScholesPut.epsilon","title":"Put"},{"location":"3.the_greeks_blackscholes/#rho","text":"","title":"Rho"},{"location":"3.the_greeks_blackscholes/#call_4","text":"$$KTe^{-rT}\\Phi(d_2)$$ ::: blackscholes.call.BlackScholesCall.rho","title":"Call"},{"location":"3.the_greeks_blackscholes/#put_4","text":"$$-KTe^{-rT}\\Phi(-d_2)$$ ::: blackscholes.put.BlackScholesPut.rho","title":"Put"},{"location":"3.the_greeks_blackscholes/#lambda","text":"$$\\Delta \\frac{S}{V}$$ where $\\Delta$ indicates the Delta Greek . ::: blackscholes.base.BlackScholesBase.lambda_greek","title":"Lambda"},{"location":"3.the_greeks_blackscholes/#vanna","text":"$$\\frac{\\mathcal{V}}{S}\\bigg[ 1-\\frac{d_1}{\\sigma\\sqrt{T}} \\bigg]$$ where $\\mathcal{V}$ indicates the Vega Greek . ::: blackscholes.base.BlackScholesBase.vanna","title":"Vanna"},{"location":"3.the_greeks_blackscholes/#charm","text":"","title":"Charm"},{"location":"3.the_greeks_blackscholes/#call_5","text":"$$qe^{-qT}\\Phi(d_1) - e^{-qT}\\phi(d_1) \\frac{2(r-q)T - d_2\\sigma\\sqrt{T}}{2T\\sigma\\sqrt{T}}$$ ::: blackscholes.call.BlackScholesCall.charm","title":"Call"},{"location":"3.the_greeks_blackscholes/#put_5","text":"$$-qe^{-qT}\\Phi(-d_1) - e^{-qT}\\phi(d_1) \\frac{2(r-q)T - d_2\\sigma\\sqrt{T}}{2T\\sigma\\sqrt{T}}$$ ::: blackscholes.put.BlackScholesPut.charm","title":"Put"},{"location":"3.the_greeks_blackscholes/#vomma","text":"$$\\mathcal{V}\\frac{d_1 d_2}{\\sigma}$$ where $\\mathcal{V}$ indicates the Vega Greek . ::: blackscholes.base.BlackScholesBase.vomma","title":"Vomma"},{"location":"3.the_greeks_blackscholes/#veta","text":"$$-Se^{-qT}\\phi(d_1)\\sqrt{T} \\bigg[ q+\\frac{(r-q)d_1}{\\sigma\\sqrt{T}} - \\frac{1+d_1d_2}{2T} \\bigg]$$ ::: blackscholes.base.BlackScholesBase.veta","title":"Veta"},{"location":"3.the_greeks_blackscholes/#phi","text":"$$e^{-rT} \\frac{1}{K} \\frac{1}{\\sqrt{2\\pi\\sigma^2T}} e^{-\\frac{1}{2\\sigma^2 r} \\bigg[ ln(\\frac{K}{S}) - ((r - q) - \\frac{1}{2}\\sigma^2)T \\bigg]^2}$$ ::: blackscholes.base.BlackScholesBase.phi","title":"Phi"},{"location":"3.the_greeks_blackscholes/#speed","text":"$$-\\frac{\\Gamma}{S} \\bigg( \\frac{d_1}{\\sigma\\sqrt{T}} + 1 \\bigg)$$ where $\\Gamma$ is the Gamma Greek . ::: blackscholes.base.BlackScholesBase.speed","title":"Speed"},{"location":"3.the_greeks_blackscholes/#zomma","text":"$$\\Gamma \\frac{d_1 d_2 - 1}{\\sigma}$$ where $\\Gamma$ is the Gamma Greek . ::: blackscholes.base.BlackScholesBase.zomma","title":"Zomma"},{"location":"3.the_greeks_blackscholes/#color","text":"$$- e^{-qT}\\frac{\\phi(d_1)}{2ST\\sigma\\sqrt{T}} \\bigg[2qr + 1 + \\frac{2(r-q)T - d_2\\sigma\\sqrt{T}}{\\sigma\\sqrt{T}}d_1 \\bigg]$$ ::: blackscholes.base.BlackScholesBase.color","title":"Color"},{"location":"3.the_greeks_blackscholes/#ultima","text":"$$\\frac{-\\mathcal{V}}{\\sigma^2} \\big[ d_1 d_2 (1 - d_1 d_2) + d_1^2 + d_2^2 \\big]$$ where $\\mathcal{V}$ indicates the Vega Greek . ::: blackscholes.base.BlackScholesBase.ultima","title":"Ultima"},{"location":"3.the_greeks_blackscholes/#dual-delta","text":"","title":"Dual Delta"},{"location":"3.the_greeks_blackscholes/#call_6","text":"$$-e^{-rT}\\Phi(d_2)$$ ::: blackscholes.call.BlackScholesCall.dual_delta","title":"Call"},{"location":"3.the_greeks_blackscholes/#put_6","text":"$$e^{-rT}\\Phi(-d_2)$$ ::: blackscholes.put.BlackScholesPut.dual_delta","title":"Put"},{"location":"3.the_greeks_blackscholes/#dual-gamma","text":"$$e^{-rT} \\frac{\\phi(d_2)}{K\\sigma\\sqrt{T}}$$ ::: blackscholes.base.BlackScholesBase.dual_gamma","title":"Dual Gamma"},{"location":"3.the_greeks_blackscholes/#alpha","text":"::: blackscholes.base.BlackScholesBase.alpha","title":"Alpha"},{"location":"4.the_greeks_black76/","text":"4. The Greeks (Black-76) Below you will find all Greeks for the Black-76 model as formulas, code and descriptions. The Black-76 model is a variant of Black-Scholes-Merton and is mostly used to price options on futures and bonds. Parameters Reference of all symbols that are used in the formulas: $F$ = Futures price $K$ = Strike price $T$ = Time to maturity (in years) $r$ = Risk-free rate $\\sigma$ = Volatility $\\phi(.)$ = Probability Density Function (PDF) of $\\mathcal{N}(0, 1)$ $\\Phi(.)$ = Cumulative Density Function (CDF) of $\\mathcal{N}(0, 1)$ $d_1 = \\frac{ln(\\frac{F}{K}) + \\frac{1}{2}\\sigma^2 T}{\\sigma\\sqrt{T}}$ $d_2 = d_1 - \\sigma\\sqrt{T}$ Delta Call $$e^{-rT}\\Phi(d_1)$$ ::: blackscholes.call.Black76Call.delta Put $$-e^{-rT}\\Phi(-d_1)$$ ::: blackscholes.put.Black76Put.delta Gamma $$e^{-rT} \\frac{\\phi(d_1)}{F \\sigma \\sqrt{T}}$$ ::: blackscholes.base.Black76Base.gamma Vega Symbol for Vega is $\\mathcal{V}$ . $$Fe^{-rT} \\phi(d_1) \\sqrt{T}$$ ::: blackscholes.base.Black76Base.vega Theta Call $$-\\frac{Fe^{-rT}\\phi(d_1)\\sigma}{2\\sqrt{T}} - rKe^{-rT}\\Phi(d_2)+rFe^{-rT}\\Phi(d_1)$$ ::: blackscholes.call.Black76Call.theta Put $$-\\frac{Fe^{-rT}\\phi(d_1)\\sigma}{2\\sqrt{T}} + rKe^{-rT}\\Phi(-d_2) - rFe^{-rT}\\Phi(-d_1)$$ ::: blackscholes.put.Black76Put.theta Rho Call $$-Te^{-rT} \\bigg[ F\\Phi(d_1) - K \\Phi(d_2) \\bigg]$$ ::: blackscholes.call.Black76Call.rho Put $$-Te^{-rT} \\bigg[ K\\Phi(-d_2) - F \\Phi(-d_1) \\bigg]$$ ::: blackscholes.put.Black76Put.rho Vanna $$\\frac{\\mathcal{V}}{F} \\bigg[ 1 - \\frac{d_1}{\\sigma \\sqrt{T}} \\bigg]$$ where $\\mathcal{V}$ indicates the Vega Greek . ::: blackscholes.base.Black76Base.vanna Vomma $$\\mathcal{V} \\frac{d_1 d_2}{\\sigma}$$ where $\\mathcal{V}$ indicates the Vega Greek . ::: blackscholes.base.Black76Base.vomma","title":"4. The Greeks (Black-76)"},{"location":"4.the_greeks_black76/#4-the-greeks-black-76","text":"Below you will find all Greeks for the Black-76 model as formulas, code and descriptions. The Black-76 model is a variant of Black-Scholes-Merton and is mostly used to price options on futures and bonds.","title":"4. The Greeks (Black-76)"},{"location":"4.the_greeks_black76/#parameters","text":"Reference of all symbols that are used in the formulas: $F$ = Futures price $K$ = Strike price $T$ = Time to maturity (in years) $r$ = Risk-free rate $\\sigma$ = Volatility $\\phi(.)$ = Probability Density Function (PDF) of $\\mathcal{N}(0, 1)$ $\\Phi(.)$ = Cumulative Density Function (CDF) of $\\mathcal{N}(0, 1)$ $d_1 = \\frac{ln(\\frac{F}{K}) + \\frac{1}{2}\\sigma^2 T}{\\sigma\\sqrt{T}}$ $d_2 = d_1 - \\sigma\\sqrt{T}$","title":"Parameters"},{"location":"4.the_greeks_black76/#delta","text":"","title":"Delta"},{"location":"4.the_greeks_black76/#call","text":"$$e^{-rT}\\Phi(d_1)$$ ::: blackscholes.call.Black76Call.delta","title":"Call"},{"location":"4.the_greeks_black76/#put","text":"$$-e^{-rT}\\Phi(-d_1)$$ ::: blackscholes.put.Black76Put.delta","title":"Put"},{"location":"4.the_greeks_black76/#gamma","text":"$$e^{-rT} \\frac{\\phi(d_1)}{F \\sigma \\sqrt{T}}$$ ::: blackscholes.base.Black76Base.gamma","title":"Gamma"},{"location":"4.the_greeks_black76/#vega","text":"Symbol for Vega is $\\mathcal{V}$ . $$Fe^{-rT} \\phi(d_1) \\sqrt{T}$$ ::: blackscholes.base.Black76Base.vega","title":"Vega "},{"location":"4.the_greeks_black76/#theta","text":"","title":"Theta"},{"location":"4.the_greeks_black76/#call_1","text":"$$-\\frac{Fe^{-rT}\\phi(d_1)\\sigma}{2\\sqrt{T}} - rKe^{-rT}\\Phi(d_2)+rFe^{-rT}\\Phi(d_1)$$ ::: blackscholes.call.Black76Call.theta","title":"Call"},{"location":"4.the_greeks_black76/#put_1","text":"$$-\\frac{Fe^{-rT}\\phi(d_1)\\sigma}{2\\sqrt{T}} + rKe^{-rT}\\Phi(-d_2) - rFe^{-rT}\\Phi(-d_1)$$ ::: blackscholes.put.Black76Put.theta","title":"Put"},{"location":"4.the_greeks_black76/#rho","text":"","title":"Rho"},{"location":"4.the_greeks_black76/#call_2","text":"$$-Te^{-rT} \\bigg[ F\\Phi(d_1) - K \\Phi(d_2) \\bigg]$$ ::: blackscholes.call.Black76Call.rho","title":"Call"},{"location":"4.the_greeks_black76/#put_2","text":"$$-Te^{-rT} \\bigg[ K\\Phi(-d_2) - F \\Phi(-d_1) \\bigg]$$ ::: blackscholes.put.Black76Put.rho","title":"Put"},{"location":"4.the_greeks_black76/#vanna","text":"$$\\frac{\\mathcal{V}}{F} \\bigg[ 1 - \\frac{d_1}{\\sigma \\sqrt{T}} \\bigg]$$ where $\\mathcal{V}$ indicates the Vega Greek . ::: blackscholes.base.Black76Base.vanna","title":"Vanna"},{"location":"4.the_greeks_black76/#vomma","text":"$$\\mathcal{V} \\frac{d_1 d_2}{\\sigma}$$ where $\\mathcal{V}$ indicates the Vega Greek . ::: blackscholes.base.Black76Base.vomma","title":"Vomma"},{"location":"5.itm/","text":"5. In-The-Money proxies There are currently two ways to estimate the probability of an option being \"in-the-money\" in using the Black-Scholes-Merton model . Naive estimate Through dual_delta Parameters Reference of all symbols that are used in the formulas: $T$ = Time to maturity (in years) $r$ = Risk-free rate $q$ = Annual dividend yield $\\Phi(.)$ = Cumulative Density Function (CDF) of $\\mathcal{N}(0, 1)$ $d_1 = \\frac{ln(\\frac{S}{K}) + (r - q + \\frac{1}{2}\\sigma^2)T}{\\sigma\\sqrt{T}}$ $d_2 = d_1 - \\sigma\\sqrt{T}$ 1. Naive estimate There is a parity between this estimate for calls and puts. In other words, the estimate of a call plus that of a put with same input parameters always equals $1$ . Call $$\\Phi(d_2)$$ from blackscholes import BlackScholesCall call = BlackScholesCall ( S = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) call . in_the_money () ## 0.71805 ::: blackscholes.call.BlackScholesCall.in_the_money Put $$1 - \\Phi(d_2)$$ from blackscholes import BlackScholesPut put = BlackScholesPut ( S = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) put . in_the_money () ## 0.28194 ::: blackscholes.put.BlackScholesPut.in_the_money 2. Dual Delta Dual delta is an option Greek that also happens to provide a good estimate of the probability that an option will expire in-the-money. There is a parity between the dual delta for calls and puts. In other words, the dual delta of call plus dual delta of put with same input parameters always equals $1$ . Call $$e^{-rT}\\Phi(d_2)$$ from blackscholes import BlackScholesCall call = BlackScholesCall ( S = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) call . dual_delta () ## 0.71626 ::: blackscholes.call.BlackScholesCall.dual_delta Put $$e^{-rT}\\Phi(-d_2)$$ from blackscholes import BlackScholesPut put = BlackScholesPut ( S = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) put . dual_delta () ## 0.28124 ::: blackscholes.put.BlackScholesPut.dual_delta","title":"5. In-The-Money proxies"},{"location":"5.itm/#5-in-the-money-proxies","text":"There are currently two ways to estimate the probability of an option being \"in-the-money\" in using the Black-Scholes-Merton model . Naive estimate Through dual_delta","title":"5. In-The-Money proxies"},{"location":"5.itm/#parameters","text":"Reference of all symbols that are used in the formulas: $T$ = Time to maturity (in years) $r$ = Risk-free rate $q$ = Annual dividend yield $\\Phi(.)$ = Cumulative Density Function (CDF) of $\\mathcal{N}(0, 1)$ $d_1 = \\frac{ln(\\frac{S}{K}) + (r - q + \\frac{1}{2}\\sigma^2)T}{\\sigma\\sqrt{T}}$ $d_2 = d_1 - \\sigma\\sqrt{T}$","title":"Parameters"},{"location":"5.itm/#1-naive-estimate","text":"There is a parity between this estimate for calls and puts. In other words, the estimate of a call plus that of a put with same input parameters always equals $1$ .","title":"1. Naive estimate "},{"location":"5.itm/#call","text":"$$\\Phi(d_2)$$ from blackscholes import BlackScholesCall call = BlackScholesCall ( S = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) call . in_the_money () ## 0.71805 ::: blackscholes.call.BlackScholesCall.in_the_money","title":"Call"},{"location":"5.itm/#put","text":"$$1 - \\Phi(d_2)$$ from blackscholes import BlackScholesPut put = BlackScholesPut ( S = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) put . in_the_money () ## 0.28194 ::: blackscholes.put.BlackScholesPut.in_the_money","title":"Put"},{"location":"5.itm/#2-dual-delta","text":"Dual delta is an option Greek that also happens to provide a good estimate of the probability that an option will expire in-the-money. There is a parity between the dual delta for calls and puts. In other words, the dual delta of call plus dual delta of put with same input parameters always equals $1$ .","title":"2. Dual Delta "},{"location":"5.itm/#call_1","text":"$$e^{-rT}\\Phi(d_2)$$ from blackscholes import BlackScholesCall call = BlackScholesCall ( S = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) call . dual_delta () ## 0.71626 ::: blackscholes.call.BlackScholesCall.dual_delta","title":"Call"},{"location":"5.itm/#put_1","text":"$$e^{-rT}\\Phi(-d_2)$$ from blackscholes import BlackScholesPut put = BlackScholesPut ( S = 55 , K = 50 , T = 1 , r = 0.0025 , sigma = 0.15 ) put . dual_delta () ## 0.28124 ::: blackscholes.put.BlackScholesPut.dual_delta","title":"Put"},{"location":"6.option_structures/","text":"6. Option Structures Several options can be compounded in what we call \"Option Structures\". This allows us to hedge out directional bets and bet purely on volatility. The structures that we discuss here: Straddle Strangle Butterfly Iron Condor Spreads Iron Butterfly All structures have a long and short version. price , get_core_greeks , get_all_greeks and all greeks can individually be retrieved from the compound structures. To see what greeks can be computed check section 3.The Greeks (Black Scholes) . Parameters Reference of all symbols that are used in the formulas: $C$ = Call option $P$ = Put option $S$ = Asset price $K$ = Strike price $T$ = Time to maturity (in years) $r$ = Risk-free rate $sigma$ = Volatility 1. Straddle Straddles are built a call and put option with the same strike price $K$ and the same expiration date. If applied correctly this allows one to profit from volatility regardless of the direction of the underlying asset. Long straddle ( BlackScholesStraddleLong ): $$P(K) + C(K)$$ from blackscholes import BlackScholesStraddleLong straddle = BlackScholesStraddleLong ( S = 55 , K = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) straddle . price () ## 7.5539 straddle . delta () ## 0.5328 Short straddle ( BlackScholesStraddleShort ): $$-P(K) - C(K)$$ from blackscholes import BlackScholesStraddleShort straddle = BlackScholesStraddleShort ( S = 55 , K = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) straddle . price () ## -7.5539 straddle . delta () ## -0.5328 2. Strangle Strangles are similar to straddles, but now the call and put option have different strike prices. This structure can be profitable if the underlying asset will have a large movement, regardless of which direction the movement is. $K_1$ = Strike price for the put. $K_2$ = Strike price for the call. It must hold that $K_1 < K_2$ . Long strangle ( BlackScholesStrangleLong ): $$P(K_1) + C(K_2)$$ from blackscholes import BlackScholesStrangleLong strangle = BlackScholesStrangleLong ( S = 55 , K1 = 40 , K2 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) strangle . price () ## 6.3800 strangle . delta () ## 0.7530 Short strangle ( BlackScholesStrangleShort ): $$-P(K_1) - C(K_2)$$ from blackscholes import BlackScholesStrangleShort strangle = BlackScholesStrangleShort ( S = 55 , K1 = 40 , K2 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) strangle . price () ## -6.3800 strangle . delta () ## -0.7530 3. Butterfly The butterfly is a combination of three options. One implements this when one believes the future volatility of the underlying asset is going to be lower or higher than the implied volatility when long or short, respectively. Choose three strike prices $K_1$ , $K_2$ and $K_3$ . Two conditions must hold when choosing strike prices: $K_1<K_2<K_3$ $K_2-K_1=K_3-K_2$ (i.e. option position should be symmetric) Long (call) butterfly ( BlackScholesButterflyLong ): $$C(K_1) - 2C(K_2) + C(K_3)$$ from blackscholes import BlackScholesButterflyLong butterfly = BlackScholesButterflyLong ( S = 55 , K1 = 40 , K2 = 50 , K3 = 60 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) butterfly . price () ## 3.9993 butterfly . delta () ## -0.2336 Short (put) butterfly ( BlackScholesButterflyShort ): $$-P(K_1) + 2P(K_2) - P(K_3)$$ from blackscholes import BlackScholesButterflyShort butterfly = BlackScholesButterflyShort ( S = 55 , K1 = 40 , K2 = 50 , K3 = 60 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) butterfly . price () ## -3.9993 butterfly . delta () ## 0.2336 4. Iron Condor The iron condor makes use of four different strike prices and is a variant of the butterfly. The structure involves 2 call options and 2 put options. Choose four strike prices $K_1$ , $K_2$ , $K_3$ and $K_4$ . Two conditions must hold when choosing strike prices: $K_1<K_2<K_3<K_4$ $K_4-K_3=K_2-K_1$ (i.e. option position should be symmetric) Long iron condor ( BlackScholesIronCondorLong ): $$-P(K_1) + P(K_2) + C(K_3) - C(K_4)$$ from blackscholes import BlackScholesIronCondorLong iron_condor = BlackScholesIronCondorLong ( S = 55 , K1 = 20 , K2 = 25 , K3 = 45 , K4 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) iron_condor . price () ## 4.0742 iron_condor . delta () ## 0.1572 Short iron condor ( BlackScholesIronCondorShort ): $$P(K_1) - P(K_2) - C(K_3) + C(K_4)$$ from blackscholes import BlackScholesIronCondorShort iron_condor = BlackScholesIronCondorShort ( S = 55 , K1 = 20 , K2 = 25 , K3 = 45 , K4 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) iron_condor . price () ## -4.0742 iron_condor . delta () ## -0.1572 5. Spreads A spread consists of buying and selling one option of the same type with different strike prices. The potential payoff and losses are hereby bounded on both sides. Choose two strike prices $K_1$ and $K_2$ . Bull spread For a bull spread: Buy one call option with a lower strike price. Sell one call option with a higher strike price. It must hold that $K_1 < K_2$ . $$C(K_1) - C(K_2)$$ from blackscholes import BlackScholesBullSpread bull_spread = BlackScholesBullSpread ( S = 55 , K1 = 40 , K2 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) bull_spread . price () ## 8.8011 bull_spread . delta () ## 0.2202 Bear spread For a bear spread: Buy one put option with a higher strike price. Sell one put option with a lower strike price. It must hold that $K_1 > K_2$ . $$P(K_1) - P(K_2)$$ from blackscholes import BlackScholesBearSpread bear_spread = BlackScholesBearSpread ( S = 55 , K1 = 50 , K2 = 40 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) bear_spread . price () ## 1.1740 bear_spread . delta () ## -0.2202 6. Iron Butterfly An iron butterfly combines concepts from the iron condor and butterfly. In principle it is very similar to an iron condor, but all strike prices must be equidistant. Like with the iron condor we combine two put options and two call options. Two options will have the same strike price. Choose three strike prices $K_1$ , $K_2$ , $K_3$ . Two conditions must hold when choosing strike prices: $K_1<K_2<K_3$ $K_3-K_2=K_2-K_1$ (i.e. equidistant strike prices). Long iron butterfly $$-P(K_1) + P(K_2) + C(K_2) - C(K_3)$$ from blackscholes import BlackScholesIronButterflyLong iron_butterfly = BlackScholesIronButterflyLong ( S = 55 , K1 = 95 , K2 = 100 , K3 = 105 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) iron_butterfly . price () ## 4.9873 iron_butterfly . delta () ## -0.0001 Short iron butterfly $$P(K_1) + - P(K_2) - C(K_2) + C(K_3)$$ from blackscholes import BlackScholesIronButterflyShort iron_butterfly = BlackScholesIronButterflyShort ( S = 55 , K1 = 95 , K2 = 100 , K3 = 105 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) iron_butterfly . price () ## -4.9873 iron_butterfly . delta () ## 0.0001","title":"6. Option Structures"},{"location":"6.option_structures/#6-option-structures","text":"Several options can be compounded in what we call \"Option Structures\". This allows us to hedge out directional bets and bet purely on volatility. The structures that we discuss here: Straddle Strangle Butterfly Iron Condor Spreads Iron Butterfly All structures have a long and short version. price , get_core_greeks , get_all_greeks and all greeks can individually be retrieved from the compound structures. To see what greeks can be computed check section 3.The Greeks (Black Scholes) .","title":"6. Option Structures"},{"location":"6.option_structures/#parameters","text":"Reference of all symbols that are used in the formulas: $C$ = Call option $P$ = Put option $S$ = Asset price $K$ = Strike price $T$ = Time to maturity (in years) $r$ = Risk-free rate $sigma$ = Volatility","title":"Parameters"},{"location":"6.option_structures/#1-straddle","text":"Straddles are built a call and put option with the same strike price $K$ and the same expiration date. If applied correctly this allows one to profit from volatility regardless of the direction of the underlying asset.","title":"1. Straddle "},{"location":"6.option_structures/#long-straddle-blackscholesstraddlelong","text":"$$P(K) + C(K)$$ from blackscholes import BlackScholesStraddleLong straddle = BlackScholesStraddleLong ( S = 55 , K = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) straddle . price () ## 7.5539 straddle . delta () ## 0.5328","title":"Long straddle (BlackScholesStraddleLong):"},{"location":"6.option_structures/#short-straddle-blackscholesstraddleshort","text":"$$-P(K) - C(K)$$ from blackscholes import BlackScholesStraddleShort straddle = BlackScholesStraddleShort ( S = 55 , K = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) straddle . price () ## -7.5539 straddle . delta () ## -0.5328","title":"Short straddle (BlackScholesStraddleShort):"},{"location":"6.option_structures/#2-strangle","text":"Strangles are similar to straddles, but now the call and put option have different strike prices. This structure can be profitable if the underlying asset will have a large movement, regardless of which direction the movement is. $K_1$ = Strike price for the put. $K_2$ = Strike price for the call. It must hold that $K_1 < K_2$ .","title":"2. Strangle "},{"location":"6.option_structures/#long-strangle-blackscholesstranglelong","text":"$$P(K_1) + C(K_2)$$ from blackscholes import BlackScholesStrangleLong strangle = BlackScholesStrangleLong ( S = 55 , K1 = 40 , K2 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) strangle . price () ## 6.3800 strangle . delta () ## 0.7530","title":"Long strangle (BlackScholesStrangleLong):"},{"location":"6.option_structures/#short-strangle-blackscholesstrangleshort","text":"$$-P(K_1) - C(K_2)$$ from blackscholes import BlackScholesStrangleShort strangle = BlackScholesStrangleShort ( S = 55 , K1 = 40 , K2 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) strangle . price () ## -6.3800 strangle . delta () ## -0.7530","title":"Short strangle (BlackScholesStrangleShort):"},{"location":"6.option_structures/#3-butterfly","text":"The butterfly is a combination of three options. One implements this when one believes the future volatility of the underlying asset is going to be lower or higher than the implied volatility when long or short, respectively. Choose three strike prices $K_1$ , $K_2$ and $K_3$ . Two conditions must hold when choosing strike prices: $K_1<K_2<K_3$ $K_2-K_1=K_3-K_2$ (i.e. option position should be symmetric)","title":"3. Butterfly "},{"location":"6.option_structures/#long-call-butterfly-blackscholesbutterflylong","text":"$$C(K_1) - 2C(K_2) + C(K_3)$$ from blackscholes import BlackScholesButterflyLong butterfly = BlackScholesButterflyLong ( S = 55 , K1 = 40 , K2 = 50 , K3 = 60 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) butterfly . price () ## 3.9993 butterfly . delta () ## -0.2336","title":"Long (call) butterfly (BlackScholesButterflyLong):"},{"location":"6.option_structures/#short-put-butterfly-blackscholesbutterflyshort","text":"$$-P(K_1) + 2P(K_2) - P(K_3)$$ from blackscholes import BlackScholesButterflyShort butterfly = BlackScholesButterflyShort ( S = 55 , K1 = 40 , K2 = 50 , K3 = 60 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) butterfly . price () ## -3.9993 butterfly . delta () ## 0.2336","title":"Short (put) butterfly (BlackScholesButterflyShort):"},{"location":"6.option_structures/#4-iron-condor","text":"The iron condor makes use of four different strike prices and is a variant of the butterfly. The structure involves 2 call options and 2 put options. Choose four strike prices $K_1$ , $K_2$ , $K_3$ and $K_4$ . Two conditions must hold when choosing strike prices: $K_1<K_2<K_3<K_4$ $K_4-K_3=K_2-K_1$ (i.e. option position should be symmetric)","title":"4. Iron Condor "},{"location":"6.option_structures/#long-iron-condor-blackscholesironcondorlong","text":"$$-P(K_1) + P(K_2) + C(K_3) - C(K_4)$$ from blackscholes import BlackScholesIronCondorLong iron_condor = BlackScholesIronCondorLong ( S = 55 , K1 = 20 , K2 = 25 , K3 = 45 , K4 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) iron_condor . price () ## 4.0742 iron_condor . delta () ## 0.1572","title":"Long iron condor (BlackScholesIronCondorLong):"},{"location":"6.option_structures/#short-iron-condor-blackscholesironcondorshort","text":"$$P(K_1) - P(K_2) - C(K_3) + C(K_4)$$ from blackscholes import BlackScholesIronCondorShort iron_condor = BlackScholesIronCondorShort ( S = 55 , K1 = 20 , K2 = 25 , K3 = 45 , K4 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) iron_condor . price () ## -4.0742 iron_condor . delta () ## -0.1572","title":"Short iron condor (BlackScholesIronCondorShort):"},{"location":"6.option_structures/#5-spreads","text":"A spread consists of buying and selling one option of the same type with different strike prices. The potential payoff and losses are hereby bounded on both sides. Choose two strike prices $K_1$ and $K_2$ .","title":"5. Spreads "},{"location":"6.option_structures/#bull-spread","text":"For a bull spread: Buy one call option with a lower strike price. Sell one call option with a higher strike price. It must hold that $K_1 < K_2$ . $$C(K_1) - C(K_2)$$ from blackscholes import BlackScholesBullSpread bull_spread = BlackScholesBullSpread ( S = 55 , K1 = 40 , K2 = 50 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) bull_spread . price () ## 8.8011 bull_spread . delta () ## 0.2202","title":"Bull spread"},{"location":"6.option_structures/#bear-spread","text":"For a bear spread: Buy one put option with a higher strike price. Sell one put option with a lower strike price. It must hold that $K_1 > K_2$ . $$P(K_1) - P(K_2)$$ from blackscholes import BlackScholesBearSpread bear_spread = BlackScholesBearSpread ( S = 55 , K1 = 50 , K2 = 40 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) bear_spread . price () ## 1.1740 bear_spread . delta () ## -0.2202","title":"Bear spread"},{"location":"6.option_structures/#6-iron-butterfly","text":"An iron butterfly combines concepts from the iron condor and butterfly. In principle it is very similar to an iron condor, but all strike prices must be equidistant. Like with the iron condor we combine two put options and two call options. Two options will have the same strike price. Choose three strike prices $K_1$ , $K_2$ , $K_3$ . Two conditions must hold when choosing strike prices: $K_1<K_2<K_3$ $K_3-K_2=K_2-K_1$ (i.e. equidistant strike prices).","title":"6. Iron Butterfly "},{"location":"6.option_structures/#long-iron-butterfly","text":"$$-P(K_1) + P(K_2) + C(K_2) - C(K_3)$$ from blackscholes import BlackScholesIronButterflyLong iron_butterfly = BlackScholesIronButterflyLong ( S = 55 , K1 = 95 , K2 = 100 , K3 = 105 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) iron_butterfly . price () ## 4.9873 iron_butterfly . delta () ## -0.0001","title":"Long iron butterfly"},{"location":"6.option_structures/#short-iron-butterfly","text":"$$P(K_1) + - P(K_2) - C(K_2) + C(K_3)$$ from blackscholes import BlackScholesIronButterflyShort iron_butterfly = BlackScholesIronButterflyShort ( S = 55 , K1 = 95 , K2 = 100 , K3 = 105 , T = 1.0 , r = 0.0025 , sigma = 0.15 ) iron_butterfly . price () ## -4.9873 iron_butterfly . delta () ## 0.0001","title":"Short iron butterfly"},{"location":"7.references/","text":"7. Source Code References Here you can look up source code and docstrings in blackscholes . Table of contents Black-Scholes-Merton Call option ( BlackScholesCall ) Put option ( BlackScholesPut ) Base class ( BlackScholesBase ) Black-76 Call option ( Black76Call ) Put option ( Black76Put ) Base class ( Black76Base ) Option Structures Straddle ( BlackScholesStraddleLong , BlackScholesStraddleShort ) Strangle ( BlackScholesStrangleLong , BlackScholesStrangleShort ) Butterfly ( BlackScholesButterflyLong , BlackScholesButterflyShort ) Iron Condor ( BlackScholesIronCondorLong , BlackScholesIronCondorShort ) Spreads ( BlackScholesBullSpread , BlackScholesBearSpread ) Iron Butterfly ( BlackScholesIronButterflyLong , BlackScholesIronButterflyShort ) MixIns Standard Normal Distribution ( StandardNormalMixin ) Black-Scholes-Merton Call ::: blackscholes.call.BlackScholesCall Put ::: blackscholes.put.BlackScholesPut Base class ::: blackscholes.base.BlackScholesBase Black76 Call ::: blackscholes.call.Black76Call Put ::: blackscholes.put.Black76Put Base class ::: blackscholes.base.Black76Base Straddle Long :::blackscholes.straddle.BlackScholesStraddleLong Short :::blackscholes.straddle.BlackScholesStraddleShort Strangle Long :::blackscholes.strangle.BlackScholesStrangleLong Short :::blackscholes.strangle.BlackScholesStrangleShort Butterfly Long :::blackscholes.butterfly.BlackScholesButterflyLong Short :::blackscholes.butterfly.BlackScholesButterflyShort Iron Condor Long :::blackscholes.iron_condor.BlackScholesIronCondorLong Short :::blackscholes.iron_condor.BlackScholesIronCondorShort Spreads Bull Spread :::blackscholes.spread.BlackScholesBullSpread Bear Spread :::blackscholes.spread.BlackScholesBearSpread Iron Butterfly Long :::blackscholes.iron_butterfly.BlackScholesIronButterflyLong Short :::blackscholes.iron_butterfly.BlackScholesIronButterflyShort Mixins Standard Normal Distribution ::: blackscholes.base.StandardNormalMixin","title":"7. Source Code References"},{"location":"7.references/#7-source-code-references","text":"Here you can look up source code and docstrings in blackscholes .","title":"7. Source Code References"},{"location":"7.references/#table-of-contents","text":"","title":"Table of contents"},{"location":"7.references/#black-scholes-merton","text":"Call option ( BlackScholesCall ) Put option ( BlackScholesPut ) Base class ( BlackScholesBase )","title":"Black-Scholes-Merton"},{"location":"7.references/#black-76","text":"Call option ( Black76Call ) Put option ( Black76Put ) Base class ( Black76Base )","title":"Black-76"},{"location":"7.references/#option-structures","text":"Straddle ( BlackScholesStraddleLong , BlackScholesStraddleShort ) Strangle ( BlackScholesStrangleLong , BlackScholesStrangleShort ) Butterfly ( BlackScholesButterflyLong , BlackScholesButterflyShort ) Iron Condor ( BlackScholesIronCondorLong , BlackScholesIronCondorShort ) Spreads ( BlackScholesBullSpread , BlackScholesBearSpread ) Iron Butterfly ( BlackScholesIronButterflyLong , BlackScholesIronButterflyShort )","title":"Option Structures"},{"location":"7.references/#mixins","text":"Standard Normal Distribution ( StandardNormalMixin )","title":"MixIns"},{"location":"7.references/#black-scholes-merton_1","text":"","title":"Black-Scholes-Merton"},{"location":"7.references/#call","text":"::: blackscholes.call.BlackScholesCall","title":"Call "},{"location":"7.references/#put","text":"::: blackscholes.put.BlackScholesPut","title":"Put  "},{"location":"7.references/#base-class","text":"::: blackscholes.base.BlackScholesBase","title":"Base class  "},{"location":"7.references/#black76","text":"","title":"Black76"},{"location":"7.references/#call_1","text":"::: blackscholes.call.Black76Call","title":"Call "},{"location":"7.references/#put_1","text":"::: blackscholes.put.Black76Put","title":"Put  "},{"location":"7.references/#base-class_1","text":"::: blackscholes.base.Black76Base","title":"Base class  "},{"location":"7.references/#straddle","text":"","title":"Straddle "},{"location":"7.references/#long","text":":::blackscholes.straddle.BlackScholesStraddleLong","title":"Long"},{"location":"7.references/#short","text":":::blackscholes.straddle.BlackScholesStraddleShort","title":"Short"},{"location":"7.references/#strangle","text":"","title":"Strangle "},{"location":"7.references/#long_1","text":":::blackscholes.strangle.BlackScholesStrangleLong","title":"Long"},{"location":"7.references/#short_1","text":":::blackscholes.strangle.BlackScholesStrangleShort","title":"Short"},{"location":"7.references/#butterfly","text":"","title":"Butterfly "},{"location":"7.references/#long_2","text":":::blackscholes.butterfly.BlackScholesButterflyLong","title":"Long"},{"location":"7.references/#short_2","text":":::blackscholes.butterfly.BlackScholesButterflyShort","title":"Short"},{"location":"7.references/#iron-condor","text":"","title":"Iron Condor "},{"location":"7.references/#long_3","text":":::blackscholes.iron_condor.BlackScholesIronCondorLong","title":"Long"},{"location":"7.references/#short_3","text":":::blackscholes.iron_condor.BlackScholesIronCondorShort","title":"Short"},{"location":"7.references/#spreads","text":"","title":"Spreads "},{"location":"7.references/#bull-spread","text":":::blackscholes.spread.BlackScholesBullSpread","title":"Bull Spread"},{"location":"7.references/#bear-spread","text":":::blackscholes.spread.BlackScholesBearSpread","title":"Bear Spread"},{"location":"7.references/#iron-butterfly","text":"","title":"Iron Butterfly "},{"location":"7.references/#long_4","text":":::blackscholes.iron_butterfly.BlackScholesIronButterflyLong","title":"Long"},{"location":"7.references/#short_4","text":":::blackscholes.iron_butterfly.BlackScholesIronButterflyShort","title":"Short"},{"location":"7.references/#mixins_1","text":"","title":"Mixins"},{"location":"7.references/#standard-normal-distribution","text":"::: blackscholes.base.StandardNormalMixin","title":"Standard Normal Distribution "},{"location":"8.disclaimer/","text":"8. Disclaimer Software is provided AS IS under an MIT licence. We can never guarantee that all computations will be correct. The software is tested to the best of our ability, but we cannot guarantee correct results. Always verify results before using 3rd-party libraries like this in high stakes situations. MIT License Copyright (c) 2022 Carlo AI Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"8. Disclaimer"},{"location":"8.disclaimer/#8-disclaimer","text":"Software is provided AS IS under an MIT licence. We can never guarantee that all computations will be correct. The software is tested to the best of our ability, but we cannot guarantee correct results. Always verify results before using 3rd-party libraries like this in high stakes situations. MIT License Copyright (c) 2022 Carlo AI Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"8. Disclaimer"},{"location":"contributing/","text":"Contributing The goal of this library is to be the go-to library for calculating everything related to the Black-Scholes-Merton model. There are always exciting ideas that can still be implemented. Check out the Github Issues if you are interested in picking up an existing issue. Before you build a feature Fork CarloLepelaars/blackscholes from Github. Install blackscholes including development dependencies: pip install poetry poetry install Install the pre-commit hooks with: pre-commit install Discuss what you want to implement on Github Issues before creating a Pull Request. Consider and communicate if you would be open to maintain this feature in the future. Tests Please write tests for every new feature that is implemented. When dealing with complicated formulas, see if you can check your outputs against an existing software library to guarantee good output. If you don't know how to do this, the community might be able to help out with performing checks. Also don't forget to document your new feature. Check out this documentation to decide if you should add a section to an existing doc file or even create a new Markdown file.","title":"Contributing"},{"location":"contributing/#contributing","text":"The goal of this library is to be the go-to library for calculating everything related to the Black-Scholes-Merton model. There are always exciting ideas that can still be implemented. Check out the Github Issues if you are interested in picking up an existing issue.","title":"Contributing"},{"location":"contributing/#before-you-build-a-feature","text":"Fork CarloLepelaars/blackscholes from Github. Install blackscholes including development dependencies: pip install poetry poetry install Install the pre-commit hooks with: pre-commit install Discuss what you want to implement on Github Issues before creating a Pull Request. Consider and communicate if you would be open to maintain this feature in the future.","title":"Before you build a feature"},{"location":"contributing/#tests","text":"Please write tests for every new feature that is implemented. When dealing with complicated formulas, see if you can check your outputs against an existing software library to guarantee good output. If you don't know how to do this, the community might be able to help out with performing checks. Also don't forget to document your new feature. Check out this documentation to decide if you should add a section to an existing doc file or even create a new Markdown file.","title":"Tests"}]}